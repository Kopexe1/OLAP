{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "00ad138a-a7a0-4cbb-8847-4f6827856883",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "from math import *\n",
    "import uuid\n",
    "import pymysql\n",
    "import pymongo\n",
    "import redis\n",
    "import rediscluster"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2e1d59c-709d-4241-bc90-eb430ce486d2",
   "metadata": {},
   "source": [
    "Задание 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c0e62315-5d15-4769-a40a-2bfa08c53672",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<pymysql.connections.Connection object at 0x7fac381f2110>\n"
     ]
    }
   ],
   "source": [
    "sql_connection = pymysql.connect(host='localhost',user='root',password='123qwe')\n",
    "print(sql_connection)\n",
    "sql_connection.query('use dot;')\n",
    "table_name='words'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "514ddab4-2f18-47e3-904a-16b98f8a4e00",
   "metadata": {},
   "outputs": [],
   "source": [
    "f= lambda x: '\"'+x+'\"'\n",
    "i=0\n",
    "with open(\"data.csv\") as data:\n",
    "    for line in data:\n",
    "        l = line.split(',')\n",
    "        l = list(map(f,l[0:min(20,len(l))]))\n",
    "        l[-1]=l[-1].replace('\\n','')\n",
    "        \n",
    "        fields=['id']+[f\"field{x+1}\" for x in range(len(l))]\n",
    "        \n",
    "        q=f\"insert into words({','.join(fields)}) values({i},{','.join(l)});\"\n",
    "        i+=1\n",
    "        sql_connection.query(q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "7b0cde00-3232-41de-adf6-8b8196b4b99f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total rows: (7502,)\n"
     ]
    }
   ],
   "source": [
    "cursor=sql_connection.cursoror()\n",
    "cursor.execute(\"select count(*) from words;\")\n",
    "d= cursor.fetchall()\n",
    "print(f\"total rows: {d[0]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7416612c-d30c-4a40-a81e-b7a1600d588f",
   "metadata": {},
   "source": [
    "Задание 4 и 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "61c5aef3-5d25-4206-98ff-e6d46854e19a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RedisCluster<localhost:8000>\n"
     ]
    }
   ],
   "source": [
    "redis_connection = rediscluster.RedisCluster(host='localhost',port=8000)\n",
    "print(redis_connection)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c60e423d-dbd1-481b-a56b-99a8ca371932",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 'burgers', 'meatballs', 'eggs', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)\n"
     ]
    }
   ],
   "source": [
    "cursor=sql_connection.cursoror()\n",
    "cursor.execute(\"select * from words;\")\n",
    "words=cursor.fetchall()\n",
    "print(words[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "668cf04a-6cf5-467f-aca1-70a2ce80f830",
   "metadata": {},
   "outputs": [],
   "source": [
    "for line in words[1:]:\n",
    "    newUUID = uuid.uuid4().hex\n",
    "    notNullVals = [x for x in line if x is not None]\n",
    "    for v in notNullVals:\n",
    "        redis_connection.rpush(newUUID,v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "d9d11eb7-7a5f-4542-bc15-ffb57068aca8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RedisCluster<localhost:8001>\n"
     ]
    }
   ],
   "source": [
    "redis_connection2 = rediscluster.RedisCluster(host='localhost',port=8001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "505be26a-3161-4e94-91e0-a5c0c3e467a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total keys: 7502\n",
      "first 3 keys: [b'576373dd01364ec9bb9d56541e51ca15', b'63066adbc6164ca480315fb84ea59543', b'90a1cba1a83b4a8e8b5875a23eb8be70']\n",
      "list of first key: [b'211', b'frozen vegetables', b'mineral water', b'vegetables mix', b'escalope']\n"
     ]
    }
   ],
   "source": [
    "keys = redis_connection2.keys()\n",
    "print(f\"total keys: {len(keys)}\")\n",
    "print(f\"first 3 keys: {keys[0:3]}\")\n",
    "print(f\"list of first key: {redis_connection2.lrange(keys[0],0,-1)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1b097d1-7151-46b3-a7a6-5192057144b6",
   "metadata": {},
   "source": [
    "Задание 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7a6e4145-ffca-4cbd-8e54-f0faf086804a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RedisCluster<localhost:8000>\n"
     ]
    }
   ],
   "source": [
    "redis_connection = rediscluster.RedisCluster(host='localhost',port=8000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f04efa3a-9d92-4e71-a0da-596eaa633fe2",
   "metadata": {},
   "outputs": [],
   "source": [
    "data={}\n",
    "keys = redis_connection.keys()\n",
    "for k in keys:\n",
    "    l=redis_connection.lrange(k,0,-1)\n",
    "    data[l[0].decode(\"utf-8\")]=len(l[1:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ddde7d1-d711-47ef-85de-3b80f15c4b7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "3\n",
      "1\n",
      "5\n",
      "1\n",
      "4\n",
      "3\n",
      "5\n",
      "2\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "for k in list(data.keys())[0:10]:\n",
    "    print(data[k])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "81a5f4e1-7a2d-4527-959d-69a0da9249fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "htable_name = \"rowSizes\"\n",
    "for k,v in zip(data.keys(),data.values()):\n",
    "    redis_connection.hset(htable_name,mapping={k:v})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "2aadb1bb-41c9-4043-b3f0-359437caed64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first 5 keys of hash-table 'rowSizes':[b'1312', b'5485', b'3374', b'1903', b'7099']\n",
      "b'1312' ---> b'2'\n"
     ]
    }
   ],
   "source": [
    "hkeys = redis_connection.hkeys(htable_name)\n",
    "print(f\"first 5 keys of hash-table 'rowSizes':{hkeys[0:5]}\")\n",
    "print(hkeys[0],'--->',redis_connection.hget(htable_name,hkeys[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6840e83e-78d2-4089-9c75-0699fe257326",
   "metadata": {},
   "source": [
    "Задание 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b1455544-22ee-49b7-9250-fbfd90375e0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RedisCluster<localhost:8000>\n"
     ]
    }
   ],
   "source": [
    "redis_connection = rediscluster.RedisCluster(host='localhost',port=8000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "6c888d3d-869d-4380-a99b-29854423a00a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1  :::  mineral water green tea escalope magazines cookies red wine green tea tomatoes\n",
      "2  :::  french fries yogurt cake babies food butter ground beef herb & pepper\n",
      "3  :::  hot dogs escalope green beans pancakes\n",
      "4  :::  mineral water turkey frozen vegetables olive oil yogurt cake burger sauce french fries green tea\n",
      "5  :::  ground beef muffins burgers ground beef escalope french fries low fat yogurt green grapes\n"
     ]
    }
   ],
   "source": [
    "def random_sentence(sentenceLength):\n",
    "    keys = redis_connection.keys()\n",
    "    ks = random.choices(keys,k=sentenceLength)\n",
    "    while htable_name in [x.decode(\"UTF-8\") for x in ks]:\n",
    "        ks = random.choices(keys,k=sentenceLength)\n",
    "    vals=[random.choice(redis_connection.lrange(k,1,-1)).decode(\"UTF-8\") for k in ks]\n",
    "    return ' '.join(vals)\n",
    "for i in range(5):\n",
    "    print(i+1,\" ::: \",random_sentence(random.randint(3,10)))  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df69642d-2faf-47f4-97fb-981484243ee4",
   "metadata": {},
   "source": [
    "Задание 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "a98c1f69-3eae-4bd7-b468-89be852316eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MongoClient(host=['localhost:40000'], document_class=dict, tz_aware=False, connect=True)\n"
     ]
    }
   ],
   "source": [
    "mongo_connection = pymongo.MongoClient(\"localhost\",40000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "42f0ab47-5f67-42dc-a6d3-0a6762cd227e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Database(MongoClient(host=['localhost:40000'], document_class=dict, tz_aware=False, connect=True), 'zachetdb')\n",
      "Collection(Database(MongoClient(host=['localhost:40000'], document_class=dict, tz_aware=False, connect=True), 'zachetdb'), 'words')\n"
     ]
    }
   ],
   "source": [
    "db_name = 'zachetdb'\n",
    "coll_name = 'words'\n",
    "db = mongo_connection[db_name]\n",
    "collect = db[coll_name]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "5cab11e1-1aa6-473b-b579-4f51148c0ce2",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(1000):\n",
    "    s = random_sentence(random.randint(3,20))\n",
    "    w = s.split(' ')\n",
    "    attrs = [f\"name{x}\" for x in range(len(w))]\n",
    "    collect.insert_one({k:v for k,v in zip(attrs,w) })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "78013bc1-86a7-4246-97fd-c12f2b7a32ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'_id': ObjectId('62a33228b5e5f21b41370965'), 'name0': 'mineral', 'name1': 'water', 'name2': 'ground', 'name3': 'beef', 'name4': 'milk', 'name5': 'honey', 'name6': 'chocolate', 'name7': 'french', 'name8': 'fries', 'name9': 'salad', 'name10': 'pasta', 'name11': 'milk', 'name12': 'eggs', 'name13': 'energy', 'name14': 'bar', 'name15': 'escalope', 'name16': 'grated', 'name17': 'cheese', 'name18': 'french', 'name19': 'fries', 'name20': 'spaghetti'} \n",
      "\n",
      "{'_id': ObjectId('62a33229b5e5f21b41370966'), 'name0': 'french', 'name1': 'fries', 'name2': 'fresh', 'name3': 'bread', 'name4': 'cider', 'name5': 'tomatoes', 'name6': 'escalope', 'name7': 'soup', 'name8': 'honey', 'name9': 'escalope', 'name10': 'grated', 'name11': 'cheese', 'name12': 'cookies', 'name13': 'ground', 'name14': 'beef', 'name15': 'escalope', 'name16': 'chocolate', 'name17': 'chocolate', 'name18': 'spinach', 'name19': 'french', 'name20': 'fries', 'name21': 'chicken', 'name22': 'eggs'} \n",
      "\n",
      "{'_id': ObjectId('62a33229b5e5f21b41370967'), 'name0': 'light', 'name1': 'mayo', 'name2': 'escalope', 'name3': 'protein', 'name4': 'bar', 'name5': 'escalope', 'name6': 'escalope', 'name7': 'milk'} \n",
      "\n"
     ]
    }
   ],
   "source": [
    "data = collect.find()\n",
    "for i in range(3):\n",
    "    print(data[i],'\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36bb7c24-d65a-44f2-b4fb-f69c077275de",
   "metadata": {},
   "source": [
    "Задание 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "4bb63df8-d807-440c-b026-8469d805099c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MongoClient(host=['localhost:40000'], document_class=dict, tz_aware=False, connect=True)\n"
     ]
    }
   ],
   "source": [
    "mongo_connection = pymongo.MongoClient(\"localhost\",40000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "5154bf7f-3817-4d4d-ad50-44e9fe28aefd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of found documents: 90\n",
      "\n",
      "{'_id': ObjectId('62a3322bb5e5f21b41370971'), 'name0': 'mineral', 'name1': 'water', 'name2': 'milk', 'name3': 'escalope', 'name4': 'eggs', 'name5': 'mineral', 'name6': 'water', 'name7': 'vegetables', 'name8': 'mix', 'name9': 'chocolate', 'name10': 'tomatoes', 'name11': 'red', 'name12': 'wine', 'name13': 'champagne', 'name14': 'green', 'name15': 'tea', 'name16': 'escalope'} \n",
      "\n",
      "{'_id': ObjectId('62a3322bb5e5f21b41370972'), 'name0': 'fresh', 'name1': 'tuna', 'name2': 'milk', 'name3': 'tomatoes', 'name4': 'frozen', 'name5': 'vegetables', 'name6': 'low', 'name7': 'fat', 'name8': 'yogurt', 'name9': 'cookies', 'name10': 'turkey', 'name11': 'mineral', 'name12': 'water', 'name13': 'chocolate', 'name14': 'chocolate', 'name15': 'honey', 'name16': 'chocolate', 'name17': 'frozen', 'name18': 'vegetables', 'name19': 'honey', 'name20': 'energy', 'name21': 'bar', 'name22': 'herb', 'name23': '&', 'name24': 'pepper', 'name25': 'cookies', 'name26': 'meatballs'} \n",
      "\n",
      "{'_id': ObjectId('62a3322db5e5f21b4137097f'), 'name0': 'yogurt', 'name1': 'cake', 'name2': 'salmon', 'name3': 'frozen', 'name4': 'vegetables', 'name5': 'muffins', 'name6': 'ground', 'name7': 'beef', 'name8': 'cooking', 'name9': 'oil', 'name10': 'rice', 'name11': 'eggs', 'name12': 'cookies', 'name13': 'french', 'name14': 'fries', 'name15': 'green', 'name16': 'tea', 'name17': 'shrimp'} \n",
      "\n"
     ]
    }
   ],
   "source": [
    "documents=[]\n",
    "docs = collect.find()\n",
    "for d in docs:\n",
    "    if (d['name1'].find('a')!=-1) and (d['name2'].find('m')!=-1):\n",
    "        documents.append(d)\n",
    "print(f\"number of found documents: {len(documents)}\\n\")\n",
    "for i in range(min(3,len(documents))):\n",
    "    print(documents[i],'\\n') "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
